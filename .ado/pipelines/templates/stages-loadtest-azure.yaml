parameters:
 - name: terraformWorkingDirectory
   type: string
   default: ''

 - name: customPrefix
   type: string

 - name: embeddedLoadTest
   type: boolean
   default: false

 - name: destroyInfra
   type: boolean
   default: true

 - name: loadTestTargetFQDN
   type: string
   default: ''

 - name: runChaosTesting
   displayName: "Run chaos testing" # Influences which baseline to compare to
   type: boolean
   default: false

stages:

- stage: deployazloadtest
  displayName: 'Run Azure Load Test'
  jobs:
  - job: deployazloadtest
    displayName: 'Run Azure Load Testing'
    steps:
    - checkout: self # checkout github repository
    - download: current # download pipeline artifacts

    - template: steps-set-pipeline-variables.yaml # load set-pipeline-variables function

    - template: steps-terraform-init.yaml
      parameters:
        terraformStorageAccountName:       '$(terraformStorageAccount)'
        terraformStorageResourceGroupName: '$(terraformResourceGroup)'
        terraformStateFilename:            'terraform-azurelt-${{ parameters.customPrefix }}.state'
        terraformWorkingDirectory:         '${{ parameters.terraformWorkingDirectory }}'

    # Deploy the MALT infrastructure. If running in embedded mode, the test will automatically start once the infra is provisioned.
    - template: steps-terraform-apply.yaml
      parameters:
        terraformWorkingDirectory: '${{ parameters.terraformWorkingDirectory }}'
        customPrefix:              '${{ parameters.customPrefix }}'
        environment:               '$(environment)'
        customAttributes:          '-var=queued_by="$(Build.QueuedBy)"
                                    -var=branch="$(sourceBranch)"'

    # Parsing the Terraform output for the MALT service deployment
    - template: steps-parse-terraform-output.yaml
      parameters:
        workingDirectory: '${{ parameters.terraformWorkingDirectory }}'
        displayName: 'Parse MALT deployment outputs'

    # Global Terraform output is only parsed when running in embedded mode
    - ${{ if eq(parameters.embeddedLoadTest, 'true') }}:

      # Parsing the Terraform output for the global infrastructure deployment to extract data like the Azure Front Door FQDN
      - template: steps-parse-terraform-output.yaml
        parameters:
          workingDirectory: '$(Pipeline.Workspace)/terraformOutputGlobalInfra'  # Global infra deploy output directory
          displayName: 'Parse global infrastructure deployment outputs'

      # Set loadTestTargetFQDN to the Azure Front Door FQDN (when load test is embedded)
      - task: PowerShell@2
        displayName: 'Set Azure Load Test variables'
        inputs:
          targetType: inline
          script: |
            echo "*** Setting loadTestTargetFQDN to $(frontdoor_fqdn)"
            echo "##vso[task.setvariable variable=azureLoadTestTargetFQDN]$(frontdoor_fqdn)"

            echo "*** Setting loadTestBaseline to $(azureLoadTestBaseline)"
            echo "##vso[task.setvariable variable=loadTestBaseline]$(azureLoadTestBaseline)"

    # override baseline when chaos testing is enabled
    - ${{ if eq(parameters.runChaosTesting, 'true') }}:
      - task: PowerShell@2
        displayName: 'Override loadTestBaseline for Chaos Experiments'
        inputs:
          targetType: inline
          script: |
            echo "*** Setting loadTestBaseline to $(chaosLoadTestBaseline)"
            echo "##vso[task.setvariable variable=loadTestBaseline]$(chaosLoadTestBaseline)"

    # setting parameters for standalone load test runs
    - ${{ if ne(parameters.embeddedLoadTest, 'true') }}:

      # standalone - set loadTestTargetFQDN to the FQDN specified in the pipeline parameters
      - task: PowerShell@2
        displayName: 'Set Loadtest targetUrl to ${{ parameters.loadTestTargetFQDN }}'
        inputs:
          targetType: inline
          script: |
            echo "*** Setting loadTestTargetFQDN to ${{ parameters.loadTestTargetFQDN }}"
            echo "##vso[task.setvariable variable=azureLoadTestTargetFQDN]${{ parameters.loadTestTargetFQDN }}"

    # create a new azure load test with an auto-generated loadTestId
    - task: AzureCLI@2
      displayName: 'Create new Azure Load Test'
      name: 'createAzureLoadTest'
      inputs:
        azureSubscription: '$(azureServiceConnection)'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
        scriptType: pscore
        scriptLocation: 'scriptPath'
        scriptPath: '$(System.DefaultWorkingDirectory)/src/testing/loadtest-azure/scripts/loadtest-create.ps1'
        arguments:
          -apiEndpoint "$(azureLoadTestDataPlaneURI)" `
          -loadTestDisplayName "$(get-date -f "yyyy-MM-dd hh:ss") load test for build $(Build.BuildId)" `
          -loadTestDescription "Pipeline-embedded load test for $(Build.BuildId) ($(get-date -f "dd/MM/yyyy hh:ss"))" `
          -loadTestTargetUrl "$(azureLoadTestTargetFQDN)" `
          -loadTestUserThreads "$(azureLoadTestUserThreads)" `
          -loadTestDurationSeconds "$(azureLoadTestDurationSeconds)" `
          -engineInstances "$(azureLoadTestEngineInstances)" `
          -passFailCriteria $(loadTestBaseline) `
          -pipeline $true `
          -verbose:$true

    # All of the next tasks are only applicable in embedded mode
    - ${{ if eq(parameters.embeddedLoadTest, 'true') }}:

      # This step adds additional App Components to the Load Test dashboard
      - task: AzureCLI@2
        displayName: 'Add AppComponents to Load Test'
        name: 'addAppComponentsToLoadTest'
        inputs:
          azureSubscription: '$(azureServiceConnection)'
          workingDirectory: '$(System.DefaultWorkingDirectory)'
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $releaseUnitInfraDeployOutput = Get-ChildItem $(Pipeline.Workspace)/terraformOutputReleaseUnitInfra/*.json | Get-Content | ConvertFrom-JSON

            # loop through stamps from pipeline artifact json
            foreach($stamp in $releaseUnitInfraDeployOutput.stamp_properties.value) {
              echo "**************************** REGION: $($stamp.location) ****************************"

              ./src/testing/loadtest-azure/scripts/appcomponents-add-to-loadtest.ps1 `
                -loadTestId "$(loadTestId)" `
                -apiEndpoint "$(azureLoadTestDataPlaneURI)" `
                -resourceId "$($stamp.aks_cluster_id)"

              echo "*** Adding $($stamp.aks_cluster_id)"
            }

      # upload a jmx file for the previously created azure load test with an auto-generated testFileId
      - task: AzureCLI@2
        displayName: 'Upload JMeter file'
        name: 'uploadAzureLoadTestJmx'
        inputs:
          azureSubscription: '$(azureServiceConnection)'
          scriptType: pscore
          scriptLocation: 'scriptPath'
          scriptPath: '$(System.DefaultWorkingDirectory)/src/testing/loadtest-azure/scripts/file-upload-to-loadtest.ps1'
          arguments:
            -loadTestId "$(loadTestId)" `
            -apiEndpoint "$(azureLoadTestDataPlaneURI)" `
            -testFileName "$(System.DefaultWorkingDirectory)/src/testing/loadtest-azure/scripts/catalog-test.jmx" `
            -verbose:$true

      # start azure load test
      - task: AzureCLI@2
        displayName: 'Run Azure Load Test'
        inputs:
          azureSubscription: '$(azureServiceConnection)'
          scriptType: pscore
          scriptLocation: 'scriptPath'
          scriptPath: '$(System.DefaultWorkingDirectory)/src/testing/loadtest-azure/scripts/loadtest-run.ps1'
          arguments:
            -loadTestId "$(loadTestId)" `
            -apiEndpoint "$(azureLoadTestDataPlaneURI)" `
            -testRunName "$(get-date -f "yyyy-MM-dd hh:ss") Load Test run triggered by ADO" `
            -testRunDescription "Pipeline executed load test run" `
            -testRunVUsers "$(azureLoadTestVUsers)" `
            -pipeline $true `
            -verbose:$true

      # get load test status and wait till it's done
      - task: AzureCLI@2
        displayName: 'Wait for load test to be finished'
        continueOnError: true # shows a warning but continues the pipeline
        inputs:
          azureSubscription: $(azureServiceConnection)
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |

            do {
              echo "*** Waiting additional 90 seconds for the load test run to complete.."
              start-sleep -seconds 90
              $result = $(System.DefaultWorkingDirectory)/src/testing/loadtest-azure/scripts/loadtest-get-run.ps1 `
                          -apiEndpoint "$(azureLoadTestDataPlaneURI)" `
                          -testRunId "$(testRunId)"
              $testRunStatus = ($result).status

              if ($result.status -eq "DONE") { # other states are FAILED, EXECUTING and CANCELLED
                # test has successfully finished
                echo "*** Test Run $(testRunId) was successfully completed. Status: $testRunStatus"

                # processing test data and publish it in azure devops
                $resultUrl = ($result).testArtifacts.outputArtifacts.resultUrl.url
                $logsUrl = ($result).testArtifacts.outputArtifacts.logsUrl.url
                New-Item -Path results -ItemType "directory"
                echo "*** Download resultsUrl"
                Invoke-WebRequest $resultUrl -OutFile "results/results.zip"
                echo "*** Download logsUrl"
                Invoke-WebRequest $logsUrl -OutFile "results/logs.zip"

                if ($result.testResult -eq "FAILED") {
                  throw "*** ERROR: Test result for run $($result.testRunId) is 'FAILED'. Test did not match the defined test criteria."
                }

              } elseif ($result.status -in "FAILED","CANCELLED") {
                # test ended in failed or cancelled (manually stopped) state
                throw "*** ERROR: Test run $(testRunId) ended in $($result.status) state."
              } else {
                # test is still running
                echo "*** Test Run $(testRunId) is in status $testRunStatus"
              }

              # todo - timeout?
            } while ($result.status -ne "DONE")

      - script: |
          wget https://raw.githubusercontent.com/Azure-Samples/jmeter-aci-terraform/main/scripts/jtl_junit_converter.py -O $(System.DefaultWorkingDirectory)/junit-onverter.py
          unzip results/results.zip -d results
          JMETER_RESULTS=results/testreport.csv
          JUNIT_RESULTS=output.xml
          python3 junit-onverter.py $JMETER_RESULTS $JUNIT_RESULTS
        displayName: 'RESULTS: Convert JMeter Results to JUnit Format'

      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: 'output.xml'
          failTaskOnFailedTests: false
        displayName: 'RESULTS: Publish Load Testing Results'

      # publish load test results as pipeline artifacts in azure devops
      - task: PublishBuildArtifacts@1
        inputs:
          artifactName: 'loadtest'
          pathToPublish: '$(System.DefaultWorkingDirectory)/results'

    # All of the next tasks are only applicable in headless mode
    - ${{ if eq(parameters.destroyInfra, 'true') }}:
      # Destroy Azure Load test infrastructure at the end
      - template: steps-terraform-destroy.yaml
        parameters:
          terraformStorageAccountName:       '$(terraformStorageAccount)'
          terraformStorageResourceGroupName: '$(terraformResourceGroup)'
          terraformStateFilename:     'terraform-azurelt-${{ parameters.customPrefix }}.state'
          terraformWorkingDirectory:  '${{ parameters.terraformWorkingDirectory }}'
          customAttributes:           '-var=prefix="${{ parameters.customPrefix }}"'
