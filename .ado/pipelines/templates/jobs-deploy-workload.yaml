jobs: # using jobs so they each run in parallel

- job: deploycontainerHealthService
  timeoutInMinutes: 120 # extend the default timeout of 60min since getting a certificate from Lets Encrypt sometimes takes a while
  displayName: 'Deploy HealthService workload'
  steps:

    - download: current # download pipeline artifacts

    - template: steps-buildagent-prerequisites.yaml

    - template: steps-parse-terraform-output.yaml
      parameters:
        workingDirectory: '$(Pipeline.Workspace)/terraformOutputGlobalInfra'  # Global infra deploy output directory

    - task: AzureCLI@2
      displayName: 'Install workload healthservice on AKS clusters'
      retryCountOnTaskFailure: 2
      inputs:
        azureSubscription: $(azureServiceConnection)
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |

          helm lint src/app/charts/healthservice # lint helm chart

          # load json data from downloaded terraform artifact
          $releaseUnitInfraDeployOutput = Get-ChildItem $(Pipeline.Workspace)/terraformOutputReleaseUnitInfra/*.json | Get-Content | ConvertFrom-JSON

          # loop through stamps from pipeline artifact json
          foreach($stamp in $releaseUnitInfraDeployOutput.stamp_properties.value) {
            echo "**************************** REGION: $($stamp.location) ****************************"

            $aksClusterName = $stamp.aks_cluster_name
            $aksClusterResourceGroup = $stamp.resource_group_name

            # We are using the list-locations command to retrieve the display name of the region as this is needed for the Cosmos DB SDK's ApplicationRegion parameter
            $region = az account list-locations --query "[?name == '$($stamp.location)'].displayName" -o tsv
            echo "*** Using Azure Region display name $region"

            # Load AKS credentials using --admin to bypass RBAC and interactive logins
            echo "*** Load credentials for AKS Cluster $aksClusterName in $aksClusterResourceGroup"
            az aks get-credentials --name $aksClusterName `
                                   --resource-group $aksClusterResourceGroup `
                                   --overwrite-existing --admin

            $fullContainerImageName = Get-Content -Path "$(Pipeline.Workspace)/healthservice-containerImageName/healthservice.txt"
            echo "*** Retrieved container image name from artifact - $fullContainerImageName"

            $fqdn = $stamp.aks_cluster_ingress_fqdn
            echo "*** Retrieved Ingress Controller FQDN $fqdn for AKS cluster $aksClusterName"

            # Apply workload worker helm chart
            echo  "*** Deploy healthservice to $aksClusterName (in $aksClusterResourceGroup) via helm chart"
            helm upgrade --install healthservice-workload src/app/charts/healthservice `
                         --namespace $(workloadNamespace) `
                         --create-namespace `
                         --set azure.frontdoorid="$(frontdoor_id_header)" `
                         --set azure.region="$region" `
                         --set containerimage="$fullContainerImageName" `
                         --set workload.domainname="$fqdn" `
                         --wait

            # Wait for the ingress certificate to be provisioned by cert-manager
            $retrycount = 0;
            $maxretrycount = 30
            $sleepSeconds = 60
            do {

              $certificateName = "workload-ingress-secret"

              # checking if certificate for workload-ingress-secret was issued
              if ($(kubectl get certificates $certificateName -n $(workloadNamespace) -o 'jsonpath={..status.conditions[?(@.type==\"Ready\")].status}') -ne "True")
              {
                $certReady = $false

                $retrycount++
                echo "Certificate for $certificateName not ready. Waiting for $sleepSeconds seconds and retrying... $retrycount/$maxretrycount";
                Start-Sleep $sleepSeconds
              }
              else
              {
                echo "Certificate $certificateName is ready!"
                $certReady = $true
                break
              }
            } while ( $retrycount -lt $maxretrycount )

            if(-not $certReady)
            {
              throw "*** Error - Certificate $certificateName was not provisioned in time"
            }
          }

- job: deploycontainerCatalogService
  displayName: 'Deploy CatalogService workload'
  dependsOn: deploycontainerHealthService
  steps:

    - download: current # download pipeline artifacts

    - template: steps-buildagent-prerequisites.yaml

    - template: steps-parse-terraform-output.yaml
      parameters:
        workingDirectory: '$(Pipeline.Workspace)/terraformOutputGlobalInfra'  # Global infra deploy output directory

    - task: AzureCLI@2
      displayName: 'Install workload CatalogService on AKS clusters'
      retryCountOnTaskFailure: 2
      inputs:
        azureSubscription: $(azureServiceConnection)
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |

          helm lint src/app/charts/catalogservice # lint helm chart

          # load json data from downloaded terraform artifact
          $releaseUnitInfraDeployOutput = Get-ChildItem $(Pipeline.Workspace)/terraformOutputReleaseUnitInfra/*.json | Get-Content | ConvertFrom-JSON

          # loop through stamps from pipeline artifact json
          foreach($stamp in $releaseUnitInfraDeployOutput.stamp_properties.value) {
            echo "**************************** REGION: $($stamp.location) ****************************"

            $aksClusterName = $stamp.aks_cluster_name
            $aksClusterResourceGroup = $stamp.resource_group_name

            # We are using the list-locations command to retrieve the display name of the region as this is needed for the Cosmos DB SDK's ApplicationRegion parameter
            $region = az account list-locations --query "[?name == '$($stamp.location)'].displayName" -o tsv
            echo "*** Using Azure Region display name $region"

            # Load AKS credentials using --admin to bypass RBAC and interactive logins
            echo "*** Load credentials for AKS Cluster $aksClusterName in $aksClusterResourceGroup"
            az aks get-credentials --name $aksClusterName `
                                   --resource-group $aksClusterResourceGroup `
                                   --overwrite-existing --admin

            $fqdn = $stamp.aks_cluster_ingress_fqdn
            echo "*** Retrieved Ingress Controller FQDN $fqdn for AKS cluster $aksClusterName"

            $fullContainerImageName = Get-Content -Path "$(Pipeline.Workspace)/catalogservice-containerImageName/catalogservice.txt"
            echo "*** Retrieved full container image name from artifact - $fullContainerImageName"

            # Apply workload CatalogService helm chart
            echo "*** Deploy workload CatalogService to $aksClusterName (in $aksClusterResourceGroup) via helm chart"
            echo "*** Using container image $fullContainerImageName"

            helm upgrade --install workload-catalogservice src/app/charts/catalogservice `
                         --namespace "$(workloadNamespace)" `
                         --create-namespace `
                         --set azure.frontdoorid="$(frontdoor_id_header)" `
                         --set azure.region="$region" `
                         --set containerimage="$fullContainerImageName" `
                         --set workload.domainname="$fqdn" `
                         --wait
          }

- job: deploycontainerBackgroundProcessor
  displayName: 'Deploy BackgroundProcessor workload'
  dependsOn: deploycontainerHealthService
  steps:

    - download: current # download pipeline artifacts

    - template: steps-buildagent-prerequisites.yaml

    - task: AzureCLI@2
      displayName: 'Install workload BackgroundProcessor on AKS clusters'
      retryCountOnTaskFailure: 2
      inputs:
        azureSubscription: $(azureServiceConnection)
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |

          helm lint src/app/charts/backgroundprocessor # lint helm chart

          # load json data from downloaded terraform artifact
          $releaseUnitInfraDeployOutput = Get-ChildItem $(Pipeline.Workspace)/terraformOutputReleaseUnitInfra/*.json | Get-Content | ConvertFrom-JSON

          # loop through stamps from pipeline artifact json
          foreach($stamp in $releaseUnitInfraDeployOutput.stamp_properties.value) {
            echo "**************************** REGION: $($stamp.location) ****************************"

            $aksClusterName = $stamp.aks_cluster_name
            $aksClusterResourceGroup = $stamp.resource_group_name

            # We are using the list-locations command to retrieve the display name of the region as this is needed for the Cosmos DB SDK's ApplicationRegion parameter
            $region = az account list-locations --query "[?name == '$($stamp.location)'].displayName" -o tsv
            echo "*** Using Azure Region display name $region"

            # Load AKS credentials using --admin to bypass RBAC and interactive logins
            echo "*** Load credentials for AKS Cluster $aksClusterName in $aksClusterResourceGroup"
            az aks get-credentials --name $aksClusterName `
                                   --resource-group $aksClusterResourceGroup `
                                   --overwrite-existing --admin

            $fullContainerImageName = Get-Content -Path "$(Pipeline.Workspace)/backgroundprocessor-containerImageName/backgroundprocessor.txt"
            echo "*** Retrieved full container image name from artifact - $fullContainerImageName"

            # Apply workload BackgroundProcessor helm chart
            echo  "*** Deploy workload BackgroundProcessor to $aksClusterName (in $aksClusterResourceGroup) via helm chart"
            helm upgrade --install workload-backgroundprocessor src/app/charts/backgroundprocessor `
                         --namespace $(workloadNamespace) `
                         --create-namespace `
                         --set containerimage="$fullContainerImageName" `
                         --set azure.region="$region" `
                         --wait
          }

- job: deployuiapp
  displayName: 'Deploy UI App to Storage Account'
  steps:

    - download: current # download pipeline artifacts

    - task: AzureCLI@2
      displayName: 'Upload UI app to Blob Storage'
      retryCountOnTaskFailure: 2
      inputs:
        azureSubscription: $(azureServiceConnection)
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |

          $configFilePath = "$(Pipeline.Workspace)/uiApp/config.js"
          # load JSON data from downloaded terraform artifact
          $releaseUnitInfraDeployOutput = Get-ChildItem $(Pipeline.Workspace)/terraformOutputReleaseUnitInfra/*.json | Get-Content | ConvertFrom-JSON

          # loop through stamps from pipeline artifact json
          foreach($stamp in $releaseUnitInfraDeployOutput.stamp_properties.value) {
            echo "**************************** REGION: $($stamp.location) ****************************"

            echo "*** Uploading UI app to storage account $($stamp.public_storage_account_name) in stamp $($stamp.location)"

            $keyVaultName = $stamp.key_vault_name
            $appInsightsConnString = $(az keyvault secret show --name APPLICATIONINSIGHTS-CONNECTION-STRING --vault-name $keyVaultName --query "value" -o tsv)

            # remove config.js file, which needs to be regenerated for each environment
            echo "*** Deleting the old config.js file"
            Remove-Item -Path $configFilePath

            echo "*** Storing configuration to $configFilePath"
            # warning: make sure that these variable names are in sync with client code
            Add-Content -Path $configFilePath -Value "window.API_URL = `"/catalogservice/api`""
            Add-Content -Path $configFilePath -Value "window.APPLICATIONINSIGHTS_CONNECTION_STRING = `"$appInsightsConnString`""

            $versionLabel = "$(riVariant)-$("$(Build.SourceBranch)" -Replace 'refs/heads/', '')-$(Build.BuildId)"
            echo "*** DEBUG: Setting VERSION_LABEL to $versionLabel"
            Add-Content -Path $configFilePath -Value "window.VERSION_LABEL = `"$versionLabel`""

            # clear the storage container first, before uploading, to remove any stale files
            echo "*** Clearing storage container"
            az storage blob delete-batch --account-name $stamp.public_storage_account_name --source '$web' --auth-mode key

            if($LastExitCode -ne 0)
            {
                throw "*** Error on clearing storage account $($stamp.public_storage_account_name)"
            }

            # upload compiled code to Storage $web container
            echo "*** Uploading UI application to Blob Storage"
            az storage blob upload-batch --account-name $stamp.public_storage_account_name --destination '$web' --source $(Pipeline.Workspace)/uiApp/ --auth-mode key

            if($LastExitCode -ne 0)
            {
                throw "*** Error on upload to storage account $($stamp.public_storage_account_name)"
            }
          }
