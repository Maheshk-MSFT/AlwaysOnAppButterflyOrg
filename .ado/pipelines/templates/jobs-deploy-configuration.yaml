parameters:
  - name: prepareForChaosTesting
    type: boolean
    default: false

jobs:
- job: deployconfiguration
  displayName: 'Deploy K8s Configuration'
  steps:

  - download: current # download pipeline artifacts

  - template: steps-buildagent-prerequisites.yaml

  - task: AzureCLI@2
    displayName: 'Install ingress-nginx $(ingressNginxVersion) on AKS clusters'
    retryCountOnTaskFailure: 1
    inputs:
      azureSubscription: $(azureServiceConnection)
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |

        # load json data from downloaded pipeline artifact json
        $releaseUnitInfraDeployOutput = Get-ChildItem $(Pipeline.Workspace)/terraformOutputReleaseUnitInfra/*.json | Get-Content | ConvertFrom-JSON

        # loop through stamps from pipeline artifact json
        foreach($stamp in $releaseUnitInfraDeployOutput.stamp_properties.value) {
          echo "**************************** REGION: $($stamp.location) ****************************"

          echo "*** Configuring stamp in region $($stamp.location)"
          $aksClusterName = $stamp.aks_cluster_name
          $aksClusterResourceGroup = $stamp.resource_group_name
          echo "*** Load credentials for AKS Cluster $aksClusterName in $aksClusterResourceGroup"

          # Load AKS credentials using --admin to bypass RBAC and interactive logins
          echo "*** Load credentials for AKS Cluster $aksClusterName in $aksClusterResourceGroup"
          az aks get-credentials --name $aksClusterName `
                                 --resource-group $aksClusterResourceGroup `
                                 --overwrite-existing --admin

          # Gather Ingress Load Balancer IP from pipeline artifact json
          $aksIngressIp = $stamp.aks_cluster_ingress_ip_address

          # Deploy ingress-nginx (helm) configuration
          echo "*** Installing nginx ingress controller ($aksIngressIp) in namespace $(ingressNamespace) on $aksClusterName in $aksClusterResourceGroup"
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo update

          # Deploy helm chart for ingress-nginx using a custom load balancer ip and resource group (RG in which the Public IP sits in)
          helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx `
                       --namespace $(ingressNamespace) --create-namespace `
                       --values src/config/ingress-nginx/values.helm.yaml `
                       --set controller.service.loadBalancerIP="$aksIngressIp" `
                       --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-resource-group"="$aksClusterResourceGroup" `
                       --version "$(ingressNginxVersion)" `
                       --timeout 15m0s `
                       --wait

          if ($LastExitCode -ne 0) {
            throw "*** Error on installing nginx helm chart!"
          }
        }

  - task: AzureCLI@2
    displayName: 'Configure OMSAgent (Container Insights) on AKS clusters'
    retryCountOnTaskFailure: 1
    inputs:
      azureSubscription: $(azureServiceConnection)
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |

        # load json data from downloaded pipeline artifact json
        $releaseUnitInfraDeployOutput = Get-ChildItem $(Pipeline.Workspace)/terraformOutputReleaseUnitInfra/*.json | Get-Content | ConvertFrom-JSON

        # loop through stamps from pipeline artifact json
        foreach($stamp in $releaseUnitInfraDeployOutput.stamp_properties.value) {
          echo "**************************** REGION: $($stamp.location) ****************************"

          $aksClusterName = $stamp.aks_cluster_name
          $aksClusterResourceGroup = $stamp.resource_group_name
          echo "*** Load credentials for AKS Cluster $aksClusterName in $aksClusterResourceGroup"

          # Load AKS credentials using --admin to bypass RBAC and interactive logins
          echo "*** Load credentials for AKS Cluster $aksClusterName in $aksClusterResourceGroup"
          az aks get-credentials --name $aksClusterName `
                                 --resource-group $aksClusterResourceGroup `
                                 --overwrite-existing --admin

          # Apply ConfigMap which configures OMS Agent's log and metric collection. Take a look at the reference file to understand what is being collected/excluded
          echo "*** Apply configmap for OMSAgent (Container Insights) on $aksClusterName"
          kubectl apply -f src/config/monitoring/container-azm-ms-agentconfig.yaml

          if ($LastExitCode -ne 0) {
            throw "*** Error on installing OMSAgent configmap!"
          }
        }

  - task: AzureCLI@2
    displayName: 'Install cert-manager $(certManagerVersion) on AKS clusters'
    retryCountOnTaskFailure: 1
    inputs:
      azureSubscription: $(azureServiceConnection)
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |

        # load json data from downloaded pipeline artifact json
        $releaseUnitInfraDeployOutput = Get-ChildItem $(Pipeline.Workspace)/terraformOutputReleaseUnitInfra/*.json | Get-Content | ConvertFrom-JSON

        # loop through stamps from pipeline artifact json
        foreach($stamp in $releaseUnitInfraDeployOutput.stamp_properties.value) {
          echo "**************************** REGION: $($stamp.location) ****************************"

          $aksClusterName = $stamp.aks_cluster_name
          $aksClusterResourceGroup = $stamp.resource_group_name
          echo "*** Load credentials for AKS Cluster $aksClusterName in $aksClusterResourceGroup"

          # Load AKS credentials using --admin to bypass RBAC and interactive logins
          echo "*** Load credentials for AKS Cluster $aksClusterName in $aksClusterResourceGroup"
          az aks get-credentials --name $aksClusterName `
                                 --resource-group $aksClusterResourceGroup `
                                 --overwrite-existing --admin

          # Deploy required custom resource definitions needed for cert-manager
          echo "*** Apply cert-manager CRDs on $aksClusterName"
          kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/$(certManagerVersion)/cert-manager.crds.yaml

          $certManagerNamespace = "cert-manager"

          echo "*** Setting up cert-manager ClusterIssuer with Let's Encrypt in namespace $certManagerNamespace on $aksClusterName"
          helm upgrade --install cert-manager-config src/config/cert-manager/chart/cert-manager-config`
                       --namespace $certManagerNamespace --create-namespace `
                       --set letsencrypt.contactEmail="$(contactEmail)" `
                       --wait

          if ($LastExitCode -ne 0) {
            throw "*** Error on installing ClusterIssuer helm chart!"
          }

          echo "*** Installing cert-manager via helm on $aksClusterName"
          helm repo add jetstack https://charts.jetstack.io
          helm repo update
          helm upgrade --install cert-manager jetstack/cert-manager `
                       --values src/config/cert-manager/values.helm.yaml `
                       --namespace $certManagerNamespace --create-namespace `
                       --version "$(certManagerVersion)" `
                       --wait

          if ($LastExitCode -ne 0) {
            throw "*** Error on installing cert-manager helm chart!"
          }

        }

  - task: AzureCLI@2
    displayName: 'Install KeyVault CSI driver on AKS clusters'
    retryCountOnTaskFailure: 1
    inputs:
      azureSubscription: $(azureServiceConnection)
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |

        # load json data from downloaded pipeline artifact json
        $releaseUnitInfraDeployOutput = Get-ChildItem $(Pipeline.Workspace)/terraformOutputReleaseUnitInfra/*.json | Get-Content | ConvertFrom-JSON

        # Retrieve current TenantID
        $tenantId = $(az account show --query "tenantId" --output tsv)

        # loop through stamps from pipeline artifact json
        foreach($stamp in $releaseUnitInfraDeployOutput.stamp_properties.value) {
          echo "**************************** REGION: $($stamp.location) ****************************"

          $aksClusterName = $stamp.aks_cluster_name
          $aksClusterResourceGroup = $stamp.resource_group_name
          echo "*** Load credentials for AKS Cluster $aksClusterName in $aksClusterResourceGroup"

          # Load AKS credentials using --admin to bypass RBAC and interactive logins
          echo "*** Load credentials for AKS Cluster $aksClusterName in $aksClusterResourceGroup"
          az aks get-credentials --name $aksClusterName `
                                 --resource-group $aksClusterResourceGroup `
                                 --overwrite-existing --admin

          # Gather Azure KeyVault name from terraform artifact
          $keyVaultName = $stamp.key_vault_name
          echo "*** Retrieved Key Vault name $keyVaultName"

          $allSecretNames = $(az keyvault secret list --vault-name $keyVaultName --query "join(',',[].name)" --output tsv)
          echo "*** Retrieved the names of $($allSecretNames.Split(',').Count) secrets in Key Vault $keyVaultName"

          $kubeletIdentityClientId = $(az aks show --resource-group $aksClusterResourceGroup --name $aksClusterName `
                                                   --query "identityProfile.kubeletidentity.clientId" --output tsv)

          echo "*** Retrieved Kubelet clientId $kubeletIdentityClientId for cluster $clusterName"
          echo "*** Configuring CSI secret driver on $aksClusterName via helm"
          helm upgrade --install csi-secrets-driver src/config/csi-secrets-driver/chart/csi-secrets-driver-config `
                       --namespace "$(workloadNamespace)" --create-namespace `
                       --set azure.tenantId=$tenantId `
                       --set azure.keyVaultName="$keyVaultName" `
                       --set azure.managedIdentityClientId="$kubeletIdentityClientId" `
                       --set kvSecrets="{$allSecretNames}" `
                       --wait

          if ($LastExitCode -ne 0) {
            throw "*** Error on installing CSI secret driver helm chart!"
          }

        }

  # If chaos experiments are executed as part of the pipeline run later, we need to prepare one stamps AKS cluster by installing Chaos Mesh
  - ${{ if eq(parameters.prepareForChaosTesting, 'true') }}:
    - task: AzureCLI@2
      displayName: "Install Chaos Mesh $(chaosMeshVersion) on AKS cluster"
      retryCountOnTaskFailure: 1
      inputs:
        azureSubscription: $(azureServiceConnection)
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |

          # load json data from downloaded pipeline artifact json
          $releaseUnitInfraDeployOutput = Get-ChildItem $(Pipeline.Workspace)/terraformOutputReleaseUnitInfra/*.json | Get-Content | ConvertFrom-JSON

          # take only the first stamp to inject faults into
          $locations = '$(stampLocations)' | ConvertFrom-Json -NoEnumerate # get the stamp locations
          $stamp = $releaseUnitInfraDeployOutput.stamp_properties.value | Where-Object { $_.location -eq $locations[0] }

          echo "**************************** REGION: $($stamp.location) ****************************"

          $aksClusterName = $stamp.aks_cluster_name
          $aksClusterResourceGroup = $stamp.resource_group_name
          echo "*** Load credentials for AKS Cluster $aksClusterName in $aksClusterResourceGroup"

          # Load AKS credentials using --admin to bypass RBAC and interactive logins
          echo "*** Load credentials for AKS Cluster $aksClusterName in $aksClusterResourceGroup"
          az aks get-credentials --name $aksClusterName `
                                 --resource-group $aksClusterResourceGroup `
                                 --overwrite-existing --admin

          $chaosTestingNamespace = "chaos-testing"

          echo "*** Installing Chaos Mesh via helm on $aksClusterName"

          # Add Chaos Mesh Helm Repo
          helm repo add chaos-mesh https://charts.chaos-mesh.org
          helm repo update

          # Install Chaos Mesh
          helm upgrade --install chaos-mesh chaos-mesh/chaos-mesh `
                       --namespace=$chaosTestingNamespace --create-namespace `
                       --version=$(chaosMeshVersion) `
                       --set chaosDaemon.runtime=containerd `
                       --set chaosDaemon.socketPath=/run/containerd/containerd.sock `
                       --wait

          if ($LastExitCode -ne 0) {
            throw "*** Error on installing chaos-mesh helm chart!"
          }
