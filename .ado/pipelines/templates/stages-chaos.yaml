parameters:
  - name: stageName # allow overriding stage name to make the template reusable
    type: string
    default: 'deploychaos'
  - name: dependsOn # object of stages to depend on
    type: object
    default: {}
  - name: customPrefix
    type: string
  - name: experimentDurationSeconds
    default: 180
  - name: startDelaySeconds
    default: 300
  - name: podFailure
    type: boolean
    default: false
  - name: cpuStress
    type: boolean
    default: false
  - name: memoryStress
    type: boolean
    default: false

stages:
  - stage: ${{ parameters.stageName }}
    displayName: 'Run Chaos Experiments'
    dependsOn: ${{ parameters.dependsOn }}
    jobs:
    - job: deploychaosjob
      displayName: 'Run Azure Chaos Studio'
      steps:
      - checkout: self # checkout github repository

      - download: current # download pipeline artifacts

      - template: steps-set-pipeline-variables.yaml # load the set-pipeline-variables function (used for tags and prefixes)

      - task: AzureCLI@2
        displayName: 'Prepare AKS clusters as Chaos targets'
        inputs:
          azureSubscription: $(azureServiceConnection)
          scriptType: pscore
          scriptLocation: scriptPath
          scriptPath: '$(System.DefaultWorkingDirectory)/.ado/pipelines/scripts/Prepare-AksChaosTargets.ps1'
          arguments:
            -StampLocations '$(stampLocations)'

      # Sleep for the duration of the load test startup; this is a simple attempt to sync the start of both tests.
      - task: Bash@3
        displayName: 'Sleep for ${{ parameters.startDelaySeconds }} seconds'
        inputs:
          targetType: 'inline'
          script: |
                echo "Sleeping for ${{ parameters.startDelaySeconds }} seconds while the load test is starting..."
                sleep ${{ parameters.startDelaySeconds }}

      - ${{ if eq(parameters.podFailure, 'true') }}:
        - task: AzureCLI@2
          displayName: 'Run Pod Failure experiment'
          inputs:
            azureSubscription: $(azureServiceConnection)
            scriptType: pscore
            scriptLocation: scriptPath
            scriptPath: '$(System.DefaultWorkingDirectory)/.ado/pipelines/scripts/Invoke-ChaosMeshExperiment.ps1'
            arguments:
              -ExperimentName "${{ parameters.customPrefix }}-PodFailure"
              -ExperimentJsonPath "$(System.DefaultWorkingDirectory)/src/testing/chaos-testing/experiment-json/aks_pod_failure.json"
              -StampLocations '$(stampLocations)'
              -ExperimentDurationSeconds "${{ parameters.experimentDurationSeconds }}"

      - ${{ if eq(parameters.cpuStress, 'true') }}:
        - task: AzureCLI@2
          displayName: 'Run CPU stress experiment'
          inputs:
            azureSubscription: $(azureServiceConnection)
            scriptType: pscore
            scriptLocation: scriptPath
            scriptPath: '$(System.DefaultWorkingDirectory)/.ado/pipelines/scripts/Invoke-ChaosMeshExperiment.ps1'
            arguments:
              -ExperimentName "${{ parameters.customPrefix }}-CpuStress"
              -ExperimentJsonPath "$(System.DefaultWorkingDirectory)/src/testing/chaos-testing/experiment-json/aks_cpu_stress.json"
              -StampLocations '$(stampLocations)'
              -ExperimentDurationSeconds "${{ parameters.experimentDurationSeconds }}"

      - ${{ if eq(parameters.memoryStress, 'true') }}:
        - task: AzureCLI@2
          displayName: 'Run Memory stress experiment'
          inputs:
            azureSubscription: $(azureServiceConnection)
            scriptType: pscore
            scriptLocation: scriptPath
            scriptPath: '$(System.DefaultWorkingDirectory)/.ado/pipelines/scripts/Invoke-ChaosMeshExperiment.ps1'
            arguments:
              -ExperimentName "${{ parameters.customPrefix }}-MemoryStress"
              -ExperimentJsonPath "$(System.DefaultWorkingDirectory)/src/testing/chaos-testing/experiment-json/aks_memory_stress.json"
              -StampLocations '$(stampLocations)'
              -ExperimentDurationSeconds "${{ parameters.experimentDurationSeconds }}"
