parameters:
  testStampEndpoints: true # run tests against stamp endpoints? default to true
  testGlobalEndpoint: true # run tests against front door? default to true

jobs:

- ${{ if eq(parameters.testStampEndpoints, true) }}:
  - job: smoketestingStamps
    displayName: 'Smoke Testing Stamp Endpoints'
    steps:

    - download: current # download pipeline artifacts

    - task: PowerShell@2
      displayName: 'Verify individual stamp endpoints'
      retryCountOnTaskFailure: 1
      inputs:
        targetType: 'filePath'
        filePath: $(System.DefaultWorkingDirectory)/.ado/pipelines/scripts/Run-SmokeTests.ps1
        arguments: > # avoid newline characters in multiline string
          -mode "stamp"
          -smokeTestRetryCount $(smokeTestRetryCount)
          -smokeTestRetryWaitSeconds $(smokeTestRetryWaitSeconds)

- ${{ if eq(parameters.testGlobalEndpoint, true) }}:
  - job: smoketestingGlobalEndpoints
    displayName: 'Smoke Testing Global Endpoints'
    steps:

    - download: current # download pipeline artifacts

    - template: steps-parse-terraform-output.yaml
      parameters:
        workingDirectory: '$(Pipeline.Workspace)/terraformOutputGlobalInfra'  # Global infra deploy output directory

    - task: AzureCLI@2
      displayName: 'Verify global Front Foor state configuration'
      retryCountOnTaskFailure: 1
      inputs:
        azureSubscription: $(azureServiceConnection)
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |

          # Print Front Door Deployment details for troubleshooting and debugging purposes
          $frontdoorResource = $(az resource show --id $(frontdoor_resource_id) `
                                  --query '{enabledState:properties.enabledState,provisioningState:properties.provisioningState,resourceState:properties.resourceState}')
          $frontdoorState = $frontdoorResource | ConvertFrom-Json

          echo "*** Front Door Deployment State ***"
          echo "***********************************"
          echo "*** enabledState: $($frontdoorState.enabledState)"
          echo "*** provisioningState:  $($frontdoorState.provisioningState)"
          echo "*** resourceState:  $($frontdoorState.resourceState)"

    - task: PowerShell@2
      displayName: 'Verify global Front Door endpoint'
      retryCountOnTaskFailure: 1
      inputs:
        targetType: 'filePath'
        filePath: $(System.DefaultWorkingDirectory)/.ado/pipelines/scripts/Run-SmokeTests.ps1
        arguments: > # avoid newline characters in multiline string
          -mode "global"
          -smokeTestRetryCount $(smokeTestRetryCount)
          -smokeTestRetryWaitSeconds $(smokeTestRetryWaitSeconds)

    - task: NodeTool@0
      displayName: 'Use Node $(testsNodeVersion) for PlayWright'
      inputs:
        versionSpec: '$(testsNodeVersion)' # Playwright requires Node.js 14 or higher

    - task: PowerShell@2
      displayName: 'Run PlayWright UI test and capture screenshots from global endpoint'
      retryCountOnTaskFailure: 1
      inputs:
        targetType: inline
        script: |

          # We are using Playwright to browse the UI and capture screenshots
          # install Playwright dependencies
          echo "Installing Playwright dependencies..."
          npm install playwright-chromium @playwright/test -y

          $env:TEST_BASEURL = "https://$(frontdoor_fqdn)"
          $env:SCREENSHOT_PATH = "$pwd/screenshots"
          $env:TEST_RUN_ALL_OPTIONAL_STEPS = "true"

          $playwrightTestPath = "src/testing/ui-test-playwright"

          echo "*** Running PlayWright tests from $playwrightTestPath against https://$(frontdoor_fqdn)"

          npx playwright test -c $playwrightTestPath --timeout 60000

    - publish:  'screenshots/'
      artifact: 'uiScreenshots' # artifact name
      displayName: 'Publish UI screenshots'
